poly_loci_cor
poly_sites_cor
poly_loci_cor <- list()
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
for (p in colnames(pval_genes)){
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],])
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci,snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],])
}
length(poly_loci)
poly_loci
poly_loci[1]
poly_loci[2]
poly_loci[3]
poly_loci[4]
colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]
p<-colnames(pval_genes)[1]
p
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],])
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci,snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],])
poly_sites
poly_loci
poly_sites_cor
poly_loci_cor
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
poly_loci_cor
poly_sites_cor
snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]
snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
snp_info_sampled
snp_info_sampled
snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
)
poly_loci
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
for (p in colnames(pval_genes)){
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
}
cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites))
cat('\n\n\n')
cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cor))
cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
poly_loci_cor
poly_loci_cor
a<-list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],])
a
a<-snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
a
snp_info_sampled
snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],])
snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
p<-colnames(pval_genes)[1]
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
poly_loci_cor
a<-snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]
a
list(a)
poly_loci_cor <- append(poly_loci_cor,a)
poly_loci_cor
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
poly_loci_cor
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
for (p in colnames(pval_genes)){
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
}
cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites))
cat('\n\n\n')
cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cor))
cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
poly_loci_cor
poly_loci_cor
print poly_loci_cor
print(poly_loci_cor)
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
for (p in colnames(pval_genes)){
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)]))
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps)],]))
}
cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites))
cat('\n\n\n')
cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cor))
cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
print(poly_loci_cor)
pca_geno_pop <- prcomp(geno_sampled, scale. = TRUE)
autoplot(pca_geno_pop, data = indv_info, colour = 'Population', main = "Population", frame = TRUE)
autoplot(pca_geno_pop, data = indv_info, colour = 'Sex', main = "Sex", frame = TRUE)
egn_val_pop <- pca_geno_pop$sdev^2
barplot(egn_val_pop, main = "PCA - Principle Components Variance - genotypes", xlab = "PC", ylab = "Variance")
cov_geno <- cov(t(geno))
cov_geno_avg <- colMeans(cov_geno)
#pca_geno <- prcomp(geno, scale. = TRUE)
#autoplot(pca_geno, data = indv_info, colour = 'Population', main = "Population", frame = TRUE)
#autoplot(pca_geno, data = indv_info, colour = 'Sex', main = "Sex", frame = TRUE)
pca_cov_geno <- prcomp(cov_geno, scale. = TRUE)
#pca_cov_geno <- prcomp(cov_geno)
egn_val <- pca_cov_geno$sdev^2
barplot(egn_val, main = "PCA - Principle Components Variance", xlab = "PC", ylab = "Variance")
screeplot(pca_cov_geno, npcs = 30, main = "PCA - Principle Components (1-30) Variance", xlab = "PC")
autoplot(pca_cov_geno, data = indv_info, colour = 'Population', main = "PCA Clustering - Population", frame = TRUE) + theme(plot.title = element_text(hjust = 0.5))
autoplot(pca_cov_geno, data = indv_info, colour = 'Sex', main = "PCA Clustering - Sex", frame = TRUE) + theme(plot.title = element_text(hjust = 0.5))
#ggbiplot(pca_cov_geno, choices = c(1,2) , var.axes = FALSE)
#grid.arrange(pop_structure, sex_cluster, nrow=2, ncol=2)
rec_error <- c()
for (n_comp in 1:length(pca_cov_geno$sdev)){
#cov_geno_avg <- colMeans(cov_geno)
rec_cov_geno <- t(t(pca_cov_geno$x[,1:n_comp] %*% t(pca_cov_geno$rotation[,1:n_comp])) * pca_cov_geno$scale + pca_cov_geno$center)
#rec_cov_geno <- pca_cov_geno$x[,1:n_comp] %*% t(pca_cov_geno$rotation[,1:n_comp])
#rec_cov_geno <- t(pca_cov_geno$x %*% t(as.matrix(pca_cov_geno$rotation[,1:n_comp]))) * pca_cov_geno$scale + pca_cov_geno$center
#rec_cov_geno = pca_cov_geno$x[,1:n_comp] %*% t(pca_cov_geno$rotation[,1:n_comp])
#rec_cov_geno = scale(rec_cov_geno, center = -pca_cov_geno$center, scale = FALSE)
rec_error <- c(rec_error,sum((rec_cov_geno - cov_geno)^2))
}
plot(c(1:length(pca_cov_geno$sdev)), rec_error, title("PCA Reconstruction Error"), xlab = "Number of Principle Components", ylab = "Error")
n_comp <- 5
pca_lead_cov <- pca_cov_geno$rotation[,1:n_comp]
gntps_with_cov <- gntps_sampled+n_comp
pval_genes_cov <- as.data.frame(matrix(0,gntps_sampled,genes))
colnames(pval_genes_cov) <- colnames(pheno)
pval_genes_cov_lrt <- as.data.frame(matrix(0,gntps_sampled,genes))
colnames(pval_genes_cov_lrt) <- colnames(pheno)
for (p in colnames(pheno)){
beta <- matrix(0,gntps_sampled,3+n_comp)
xa <- matrix(0,sam,gntps_sampled)
xd <- matrix(0,sam,gntps_sampled)
for (i in c(1:gntps_sampled)){
for (j in c(1:sam)){
alls <- geno_sampled[j,i]
if (alls == 0){
xa[j,i] <- -1
xd[j,i] <- -1
} else if (alls == 1){
xa[j,i] <- 0
xd[j,i] <- 1
} else {
xa[j,i] <- 1
xd[j,i] <- -1
}
}
x_mat <- matrix(c(rep(1,sam),xa[,i],xd[,i],pca_lead_cov),sam,3+n_comp)
mle <- solve(t(x_mat) %*% x_mat) %*% t(x_mat) %*% pheno[,p]
beta[i,] <- mle
}
f_stat <- rep(0,gntps_sampled)
pval <- rep(0,gntps_sampled)
pval_lrt <- rep(0,gntps_sampled)
df_M <- 2
df_E <- sam-3
beta_null <- beta
beta_null[,2:3] <- 0
for (i in c(1:gntps_sampled)){
x_mat <- matrix(c(rep(1,sam),xa[,i],xd[,i],pca_lead_cov),sam,3+n_comp)
y_hat <- x_mat %*% beta[i,]
y_hat_null <- x_mat %*% beta_null[i,]
SSE_null <- sum((pheno[,p]-y_hat_null)^2)
SSE <- sum((pheno[,p]-y_hat)^2)
f_stat[i] <- ((SSE_null-SSE)/df_M)/(SSE/df_E)
pval[i] <- pf(f_stat[i],df_M,df_E,lower.tail = FALSE)
h0_includecovar <- lr_likelihood(pheno[,p], y_hat_null)
ha_includecovar <- lr_likelihood(pheno[,p], y_hat)
pval_lrt[i] <- LRT_test(h0_includecovar, ha_includecovar, df_test = 1)
}
pval_genes_cov[,p] <- pval
pval_genes_cov_lrt[,p] <- pval_lrt
man_pval <- data.frame(snp_info_sampled,pval,1)
man_pval_lrt <- data.frame(snp_info_sampled,pval_lrt,1)
colnames(man_pval) <- c("CHR","BP","P","SNP")
colnames(man_pval_lrt) <- c("CHR","BP","P","SNP")
unif_pval <- (1:gntps_sampled)/gntps_sampled
par(mfrow=c(1,2),oma=c(0,0,2,0))
manhattan(man_pval, main = "Manhattan Plot - F-statistics", cex = 0.5)
#plot(c(1:gntps_sampled),-log10(pval),pch = 16,cex = 0.75,main = 'Manhattan Plot - F-statistics',xlab = 'Genotype',ylab = expression(-log[10](p-value)))
plot(-log10(unif_pval),-log10(sort(pval)), main = 'QQ-Plot', xlab = '-log(expected p-values)', ylab = '-log(observed p-values)')
title(paste(gene_info[p,'symbol'],'- With Corvariates (5 leading PCs) - F-statistics'), outer=TRUE)
par(mfrow=c(1,2),oma=c(0,0,2,0))
manhattan(man_pval_lrt, main = "Manhattan Plot - LRT", cex = 0.5)
#plot(c(1:gntps_sampled),-log10(pval_lrt),pch = 16,cex = 0.75,main = 'Manhattan Plot - LRT',xlab = 'Genotype',ylab = expression(-log[10](p-value)))
plot(-log10(unif_pval),-log10(sort(pval_lrt)), main = 'QQ-Plot', xlab = '-log(expected p-values)', ylab = '-log(observed p-values)')
title(paste(gene_info[p,'symbol'],'- With Corvariates (5 leading PCs) - LRT'), outer=TRUE)
}
poly_sites <- list()
poly_loci <- list()
poly_sites_cor <- list()
poly_loci_cor <- list()
for (p in colnames(pval_genes)){
poly_sites <- append(poly_sites,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05)]))
poly_loci <- append(poly_loci,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05)],]))
poly_sites_cor <- append(poly_sites_cor,list(colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps_sampled)]))
poly_loci_cor <- append(poly_loci_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes[,p] < 0.05/gntps_sampled)],]))
}
#cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites))
#cat('\n\n\n')
#cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cor))
#cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
print(poly_loci_cor)
poly_sites_cov <- list()
poly_loci_cov <- list()
poly_sites_cov_cor <- list()
poly_loci_cov_cor <- list()
for (p in colnames(pval_genes_cov)){
poly_sites_cov <- append(poly_sites_cov,list(colnames(geno_sampled)[which(pval_genes_cov[,p] < 0.05)]))
poly_loci_cov <- append(poly_loci_cov,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov[,p] < 0.05)],]))
poly_sites_cov_cor <- append(poly_sites_cov_cor,list(colnames(geno_sampled)[which(pval_genes_cov[,p] < 0.05/gntps_sampled)]))
poly_loci_cov_cor <- append(poly_loci_cov_cor,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov[,p] < 0.05/gntps_sampled)],]))
}
#cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites_cov))
#cat('\n\n\n')
#cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cov_cor))
#cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
print(poly_loci_cov_cor)
poly_sites_cov_lrt <- list()
poly_loci_cov_lrt <- list()
poly_sites_cov_cor_lrt <- list()
poly_loci_cov_cor_lrt <- list()
for (p in colnames(pval_genes_cov_lrt)){
poly_sites_cov_lrt <- append(poly_sites_cov_lrt,list(colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05)]))
poly_loci_cov_lrt <- append(poly_loci_cov_lrt,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05)],]))
poly_sites_cov_cor_lrt <- append(poly_sites_cov_cor_lrt,list(colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05/gntps_sampled)]))
poly_loci_cov_cor_lrt <- append(poly_loci_cov_cor_lrt,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05/gntps_sampled)],]))
}
cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites_cov_lrt))
cat('\n\n\n')
cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cov_cor_lrt))
cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
print(poly_loci_cov_cor)
poly_sites_cov_lrt <- list()
poly_loci_cov_lrt <- list()
poly_sites_cov_cor_lrt <- list()
poly_loci_cov_cor_lrt <- list()
for (p in colnames(pval_genes_cov_lrt)){
poly_sites_cov_lrt <- append(poly_sites_cov_lrt,list(colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05)]))
poly_loci_cov_lrt <- append(poly_loci_cov_lrt,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05)],]))
poly_sites_cov_cor_lrt <- append(poly_sites_cov_cor_lrt,list(colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05/gntps_sampled)]))
poly_loci_cov_cor_lrt <- append(poly_loci_cov_cor_lrt,list(snp_info_sampled[colnames(geno_sampled)[which(pval_genes_cov_lrt[,p] < 0.05/gntps_sampled)],]))
}
#cat(paste('\nThe significant polymorphic sites without the corrected type-I error are:\n',poly_sites_cov_lrt))
#cat('\n\n\n')
#cat(paste('\nThe significant polymorphic sites with the corrected type-I error are:\n',poly_sites_cov_cor_lrt))
#cat('\n\n')
cat('\nThe significant polymorphic loci with the corrected type-I error are:\n')
print(poly_loci_cov_cor_lrt)
mix_mod_geno_sampled <- geno_sampled[seq(1,dim(geno_sampled)[1],by = 5),seq(1,dim(geno_sampled)[2],by = 5)]
mix_mod_sam_sampled <- dim(mix_mod_geno_sampled)[1]
mix_mod_gntps_sampled <- dim(mix_mod_geno_sampled)[2]
mix_mod_snp_info_sampled <- snp_info_sampled[seq(1,dim(geno_sampled)[2],by = 5),]
X <- mix_mod_geno_sampled
A <- cov(t(X))
for (p in colnames(pheno)){
Y <- pheno[1:mix_mod_sam_sampled,p]
n_indivs = length(Y)
# Null model
One = as.matrix(rep(1, n_indivs))
log_L_null = EM_algorithm(Y, One, A)$log_L
p_values_EM = c()
# Full model
for (j in 1:ncol(X)) {
X_j = cbind(1, X[, j])
fit = EM_algorithm(Y, X_j, A)
p_values_EM[j] = pchisq(-2 * (log_L_null - fit$log_L), 1, lower.tail = FALSE)
cat(".") }
mix_mod_man_pval <- data.frame(mix_mod_snp_info_sampled,p_values_EM,1)
colnames(mix_mod_man_pval) <- c("CHR","BP","P","SNP")
mix_mod_unif_pval <- (1:mix_mod_gntps_sampled)/mix_mod_gntps_sampled
par(mfrow=c(1,2),oma=c(0,0,2,0))
manhattan(mix_mod_man_pval, main = "Manhattan Plot - LRT", cex = 0.5)
plot(-log10(mix_mod_unif_pval),-log10(sort(p_values_EM)), main = 'QQ-Plot', xlab = '-log(expected p-values)', ylab = '-log(observed p-values)')
title(paste(gene_info[p,'symbol'],'- Mixed Model'), outer=TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
geno <- read.table('databases/final_genotypes.txt', header = FALSE)
geno
geno <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps <- dim(geno)[2]
knitr::opts_chunk$set(echo = TRUE)
geno <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps <- dim(geno)[2]
hist(pheno, breaks = 50, main = 'Histogram of the Phenotypes', xlab = 'Phenotype')
hist(pheno, main = 'Histogram of the Phenotypes', xlab = 'Phenotype')
sum(pheno == 0)
sum(pheno == 1)
knitr::opts_chunk$set(echo = TRUE)
library(HardyWeinberg)
library(ggplot2)
library(devtools)
library(ggfortify)
library(factoextra)
library(ggbiplot)
library(ggpubr)
library(qqman)
library(gplots)
library(MASS)
library(lmtest)
pheno_all <- read.csv('database/QG18_phenotypes.csv',header = TRUE,row.names = 1)
View(pheno_all)
rmIpheno)
rm(
pheno)
)
rm(pheno)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
geno <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps <- dim(geno)[2]
hist(pheno, main = 'Histogram of the Phenotypes', xlab = 'Phenotype')
i <- 1
geno[,i])[1]*2
table(geno[,i])
table(geno[,i])
table(geno[,i])[1]*2
table(geno[,i])[2]
table(geno[,i])[3]*2
all_freq <- table(geno[,i])
all
all_freq
maf <- sort(all_freq)[1]
maf
maf <- sort(all_freq)[1]/sam
maf
for (i in c(1:gntps)){
all_freq <- table(geno[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05) | (is.na(maf))){
geno_del <- c(geno_del,i)
}
}
geno_all <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps <- dim(geno_all)[2]
hist(pheno, main = 'Histogram of the Phenotypes', xlab = 'Phenotype')
geno <- c()
for (i in c(1:gntps)){
all_freq <- table(geno_all[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05) | (is.na(maf))){
geno <- c(geno,i)
}
}
geno_del <- c()
for (i in c(1:gntps)){
all_freq <- table(geno[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05) | (is.na(maf))){
geno_del <- c(geno_del,i)
}
}
geno <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps <- dim(geno)[2]
geno_del <- c()
for (i in c(1:gntps)){
all_freq <- table(geno[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05) | (is.na(maf))){
geno_del <- c(geno_del,i)
}
}
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
geno_all <- read.table('databases/final_genotypes.txt', header = FALSE, sep = ',')
pheno <- read.table('databases/final_phenotypes.txt',header = FALSE)
pheno <- unlist(pheno)
sam <- length(pheno)
gntps_all <- dim(geno_all)[2]
hist(pheno, main = 'Histogram of the Phenotypes', xlab = 'Phenotype')
geno_del <- c()
for (i in c(1:gntps_all)){
all_freq <- table(geno_all[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05) | (is.na(maf))){
geno_del <- c(geno_del,i)
}
}
geno <- geno_all[,-geno_del]
gntps <- dim(geno)[2]
geno_del <- c()
for (i in c(1:gntps_all)){
all_freq <- table(geno_all[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05))){
geno_del <- c()
for (i in c(1:gntps_all)){
all_freq <- table(geno_all[,i])
maf <- sort(all_freq)[1]/sam
if ((maf < 0.05)){
geno_del <- c(geno_del,i)
}
}
geno <- geno_all[,-geno_del]
gntps <- dim(geno)[2]
source("http://bioconductor.org/biocLite.R")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
library(BSgenome.Hsapiens.UCSC.hg19)
genome <- BSgenome.Hsapiens.UCSC.hg19
genome
chr1 <- genome$chr1
chr1
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
getSequence(chromosome, start, end)
library(biomaRt)
getSequence(chr1,1,10)
listMarts
listMarts()
rm(list = ls())
library(BSgenome)
install.packages("networkD3")
library(networkD3)
# Load package
library(networkD3)
# Create fake data
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData)
install.packages("igraph")
install.packages("igraph")
install.packages("bnlearnb")
install.packages("bnlearn")
pwd
getwd
getwd()
exit()
quit()
2_3
2+3
version
update.packages()
install.packages('SomaticSignatures')
source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
pkgs <- rownames(installed.packages())
biocLite(pkgs, type="source")
source("https://bioconductor.org/biocLite.R")
biocLite("SomaticSignatures")
setwd('~/Google Drive/PhD/Courses/Analysis of Next Generation Sequencing Data/HW/HW3/')
./image/
./images/ERR458878_trimmed/per_base_quality.png
'./images/ERR458878_trimmed/per_base_quality.png'
